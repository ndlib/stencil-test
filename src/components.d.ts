/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface CycleViewer {

    }

    interface ObjectViewer {
      'nextFile': () => number;
      'urls': string;
    }
  }


    interface HTMLCycleViewerElement extends StencilComponents.CycleViewer, HTMLStencilElement {}

    var HTMLCycleViewerElement: {
      prototype: HTMLCycleViewerElement;
      new (): HTMLCycleViewerElement;
    };
    

    interface HTMLObjectViewerElement extends StencilComponents.ObjectViewer, HTMLStencilElement {}

    var HTMLObjectViewerElement: {
      prototype: HTMLObjectViewerElement;
      new (): HTMLObjectViewerElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'cycle-viewer': JSXElements.CycleViewerAttributes;
    'object-viewer': JSXElements.ObjectViewerAttributes;
    }
  }

  namespace JSXElements {

    export interface CycleViewerAttributes extends HTMLAttributes {
      'onCycleClicked'?: (event: CustomEvent<any>) => void;
    }

    export interface ObjectViewerAttributes extends HTMLAttributes {
      'urls'?: string;
    }
  }

  interface HTMLElementTagNameMap {
    'cycle-viewer': HTMLCycleViewerElement
    'object-viewer': HTMLObjectViewerElement
  }

  interface ElementTagNameMap {
    'cycle-viewer': HTMLCycleViewerElement;
    'object-viewer': HTMLObjectViewerElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;